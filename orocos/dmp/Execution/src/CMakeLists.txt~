#
#
# Components, types and plugins.
#
# The CMake 'target' names are identical to the first argument of the
# macros below, except for orocos_typegen_headers, where the target is fully
# controlled by generated code of 'typegen'.
#

# Creates a component library libExecution-<target>.so
# and installs in the directory lib/orocos/Execution/
#
orocos_component(Controller Controller.hpp Controller.cpp) # ...you may add multiple source files
orocos_component(MattiaController MattiaControl.hpp MattiaControl.cpp)
# You may add multiple orocos_component statements.


#
# Additional headers:
#
# Installs in the include/orocos/Execution/ directory
#
orocos_install_headers(Controller.hpp) # ...you may add multiple header files
orocos_install_headers(MattiaControl.hpp)
#
# You may add multiple orocos_install_headers statements.

#
# Building a Plugin
#
# Creates a plugin library libExecution-plugin-<target>.so
# and installs in the directory lib/orocos/Execution/plugins/
#
# Be aware that a plugin may only have the loadRTTPlugin() function once defined in a .cpp file.
# This function is defined by the plugin and service CPP macros.
#
#orocos_plugin(Execution-plugin Execution-plugin.cpp) # ...only one plugin function per library !
#
# You may add multiple orocos_plugin statements.


#
# Building a Service:
#
# Creates a plugin library libExecution-service-<target>.so
# and installs in the directory lib/orocos/Execution/plugins/
#
#orocos_service(Execution-service Execution-service.cpp) # ...only one service per library !
#
# You may add multiple orocos_service statements.


#
# Building a normal library (optional):
#
# Creates a library libsupport-<target>.so and installs it in
# lib/
#
#orocos_library(support support.cpp) # ...you may add multiple source files
#
# You may add multiple orocos_library statements.


